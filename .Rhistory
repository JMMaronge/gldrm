sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x=x,y=means, fill="red"))
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x=x,y=means, color="red"))
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x=x,y=means))
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(y=means))
?stat_summary
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(data=dat2, geom="errorbar")
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(data=dat, geom="errorbar")
sds
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point")
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point", size=2)
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point", size=2)=
geom_errorbar(data=dat2,aes(ymin=means-sds, ymax=means+sds), colour="blue", width=.1, position=pd)
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point", size=2)=
geom_errorbar(data=dat2,aes(ymin=means-sds, ymax=means+sds), colour="blue", width=.1)
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point", size=2)+
geom_errorbar(data=dat2,aes(ymin=means-sds, ymax=means+sds), colour="blue", width=.1)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
stat_summary(aes(x=x, y = y), fun.y=mean, colour="blue", geom="point", size=2)+
geom_errorbar(data=dat2,aes(x=x, ymin=means-sds, ymax=means+sds), colour="blue", width=.1)
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means), size=5, color="red")
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = dat$x, means = means, sds = sds)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)
source('~/.active-rstudio-document', echo=TRUE)
data.frame(x = dat$x, means = means, sds = sds)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means))
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
mean_se()
means
data.frame(x = dat$x, means = means, sds = sds)
data.frame(x = means$x, means = means, sds = sds)
data.frame( means = means, sds = sds)
data.frame(x = means$x, means = means.y, sds = sds.y)
data.frame(x = means$x, means = means$means.y, sds = sds$sds.y)
means$x
means$means.y
means
dat2 <- data.frame(x = means$x, means = means$y, sds = sds$y)
dat2
x <- factor(rep(c(1,2,3), 100)) # generate factors like your agebands
y <- rnorm(300) #generate random response like the score
dat <- data.frame(x=x,y=y) # create data frame out of these variables
means <- aggregate(y~x, data=dat, FUN=mean)
sds <- aggregate(y~x, data=dat, FUN=sd)
dat2 <- data.frame(x = means$x, means = means$y, sds = sds$y)
library(ggplot2)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means))
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=5, color="red")
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, y = means, ymin = means - sds, ymax = means + sds), size=1, color="red", width=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, ymin = means - sds, ymax = means + sds), size=1, color="blue", width=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, y=means, ymin = means - sds, ymax = means + sds), size=1, color="blue", width=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
#geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, y=means, ymin = means - sds, ymax = means + sds), size=1, color="blue", width=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, y=means, ymin = means - sds, ymax = means + sds), size=1, color="blue", width=.4)
ggplot(data = dat, aes(x=x, y=y))+
geom_point(position = "jitter", alpha=.4)+
geom_point(data=dat2, aes(x = x, y = means),  size=3, color="blue")+
geom_errorbar(data = dat2, mapping = aes(x = x, y=means, ymin = means - sds, ymax = means + sds), size=1, color="blue", width=.4)+
theme_bw()+
xlab("Age Bands (in months)")+
ylab("Score")
?tcrossprod
# functions
install.packages("gldrm")
# functions
install.packages("gldrm")
library(gldrm)
rtrunc.norm<-function(n, mean=0, sd=1, trunc1, trunc2){#generate truncated normal
trunc1.tmp <- min(trunc1, trunc2)
trunc2.tmp <- max(trunc1, trunc2)
trunc1 <- trunc1.tmp
trunc2 <- trunc2.tmp
x<-rnorm(n, mean = mean, sd=sd)
x1<-x[x>trunc1&x<trunc2]
r<-(n - length(x1))
while(r>0){
x<-rnorm(r, mean = mean, sd=sd)
x1<-c(x1,x[x>trunc1&x<trunc2]);
r<-(n - length(x1))
}
return(x1)
}
zero.trunc.poisson.pmf<-function(y,lambda){
return((lambda^y)/(factorial(y)*(exp(lambda)-1)))
}
eq<- function(alpha,eta){#find root for model
require(Rmpfr)
out<- ((alpha*exp(alpha))/(expm1(alpha)))-eta
return(out)
}
pmf.f <- function(y, lambda,theta){#pmf of truncated poisson
out <- exp(y*theta -(log(exp(lambda*exp(theta))-1)-log(exp(lambda)-1)) +
y*log(lambda)-lgamma(y+1)-log(exp(lambda)-1))
return(out)
}
cdf.f<- function(y,lambda,theta){#cdf of truncated poisson
return(sum(pmf.f(c(1:y),lambda,theta)))
}
rcdf.f<-function(n, lambda, theta){ # generate observations from truncated poisson
U<-runif(n)
Y <- vector(length = length(U))
for (i in 1:length(Y)) {
j<- 0
p<- U[i]
out <- 0
while (out<p) {
j<-j+1
out<-cdf.f(j,lambda = lambda,theta=theta)
}
Y[i] <- j
}
return(Y)
}
set.seed(571)
n <- 1000
beta0<-4
beta<-1.5
lim <- (1-beta0)/beta
x1 <- rtrunc.norm(n=n, trunc1 = lim, trunc2 = Inf)
thetas<-vector(length=length(x1))
for (j in 1:length(x1)) {
alpha<-uniroot(eq, eta=beta0+beta*x1[j], upper = 500, lower =-2)$root
thetas[j] <- log(alpha)
}
y <- vector(length = length(thetas))
for (j in 1:length(y)) {
y[j] <- rcdf.f(1,1,thetas[j])
}
dat <- data.frame(id = 1:length(y), y = y, x=x1)
hist(y, breaks = seq(from=0.5, to=22.5, by=1))
summary(y)
fit<- gldrm(formula = y~x, link = "identity", data = dat)
fit
library(devtools)
install_github("jmmaronge/gldrm")
library(gldrm)
fit2 <- gldrm(formula = y~x, link = "identity", data = dat)
install_github("jmmaronge/gldrm")
library(gldrm)
fit2 <- gldrm(formula = y~x, link = "identity", data = dat)
fit2
fit1
fit
?gldrm
?gldrm
spt1 <- sort(unique(dat$y))
sampprobs <- rep(500/length(dat$y), length(spt1))
ySptIndex <- match(dat$y, spt1) # gives index of supp to entire y vector
sampprob <- sampprobs[ySptIndex] # gives probability of sampling to ySptIndex
fit3 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
sampprob
length(sampprob)
length(unique(dat$y))
sampprob <- rep(.5, unique(length(dat$y)))
fit3 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
sampprob
sampprob <- rep(.5, length(unique(dat$y)))
fit3 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
fit3
fit
install.packages("~/Documents/Rathouz/Projects/Semiparametric_GLM/Package/gldrm/", repos = NULL, type="source")
fit4 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
fit4
fit3
sampprob <- rep(.8 length(unique(dat$y)))
sampprob <- rep(.8, length(unique(dat$y)))
fit4 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
fit4
# functions
install.packages("gldrm")
library(gldrm)
rtrunc.norm<-function(n, mean=0, sd=1, trunc1, trunc2){#generate truncated normal
trunc1.tmp <- min(trunc1, trunc2)
trunc2.tmp <- max(trunc1, trunc2)
trunc1 <- trunc1.tmp
trunc2 <- trunc2.tmp
x<-rnorm(n, mean = mean, sd=sd)
x1<-x[x>trunc1&x<trunc2]
r<-(n - length(x1))
while(r>0){
x<-rnorm(r, mean = mean, sd=sd)
x1<-c(x1,x[x>trunc1&x<trunc2]);
r<-(n - length(x1))
}
return(x1)
}
zero.trunc.poisson.pmf<-function(y,lambda){
return((lambda^y)/(factorial(y)*(exp(lambda)-1)))
}
eq<- function(alpha,eta){#find root for model
require(Rmpfr)
out<- ((alpha*exp(alpha))/(expm1(alpha)))-eta
return(out)
}
pmf.f <- function(y, lambda,theta){#pmf of truncated poisson
out <- exp(y*theta -(log(exp(lambda*exp(theta))-1)-log(exp(lambda)-1)) +
y*log(lambda)-lgamma(y+1)-log(exp(lambda)-1))
return(out)
}
cdf.f<- function(y,lambda,theta){#cdf of truncated poisson
return(sum(pmf.f(c(1:y),lambda,theta)))
}
rcdf.f<-function(n, lambda, theta){ # generate observations from truncated poisson
U<-runif(n)
Y <- vector(length = length(U))
for (i in 1:length(Y)) {
j<- 0
p<- U[i]
out <- 0
while (out<p) {
j<-j+1
out<-cdf.f(j,lambda = lambda,theta=theta)
}
Y[i] <- j
}
return(Y)
}
set.seed(571)
n <- 1000
beta0<-4
beta<-1.5
lim <- (1-beta0)/beta
x1 <- rtrunc.norm(n=n, trunc1 = lim, trunc2 = Inf)
thetas<-vector(length=length(x1))
for (j in 1:length(x1)) {
alpha<-uniroot(eq, eta=beta0+beta*x1[j], upper = 500, lower =-2)$root
thetas[j] <- log(alpha)
}
y <- vector(length = length(thetas))
for (j in 1:length(y)) {
y[j] <- rcdf.f(1,1,thetas[j])
}
dat <- data.frame(id = 1:length(y), y = y, x=x1)
hist(y, breaks = seq(from=0.5, to=22.5, by=1))
summary(y)
fit<- gldrm(formula = y~x, link = "identity", data = dat)
library(devtools)
install_github("jmmaronge/gldrm")
install.packages("gldrm")
library(gldrm)
rtrunc.norm<-function(n, mean=0, sd=1, trunc1, trunc2){#generate truncated normal
trunc1.tmp <- min(trunc1, trunc2)
trunc2.tmp <- max(trunc1, trunc2)
trunc1 <- trunc1.tmp
trunc2 <- trunc2.tmp
x<-rnorm(n, mean = mean, sd=sd)
x1<-x[x>trunc1&x<trunc2]
r<-(n - length(x1))
while(r>0){
x<-rnorm(r, mean = mean, sd=sd)
x1<-c(x1,x[x>trunc1&x<trunc2]);
r<-(n - length(x1))
}
return(x1)
}
zero.trunc.poisson.pmf<-function(y,lambda){
return((lambda^y)/(factorial(y)*(exp(lambda)-1)))
}
eq<- function(alpha,eta){#find root for model
require(Rmpfr)
out<- ((alpha*exp(alpha))/(expm1(alpha)))-eta
return(out)
}
pmf.f <- function(y, lambda,theta){#pmf of truncated poisson
out <- exp(y*theta -(log(exp(lambda*exp(theta))-1)-log(exp(lambda)-1)) +
y*log(lambda)-lgamma(y+1)-log(exp(lambda)-1))
return(out)
}
cdf.f<- function(y,lambda,theta){#cdf of truncated poisson
return(sum(pmf.f(c(1:y),lambda,theta)))
}
rcdf.f<-function(n, lambda, theta){ # generate observations from truncated poisson
U<-runif(n)
Y <- vector(length = length(U))
for (i in 1:length(Y)) {
j<- 0
p<- U[i]
out <- 0
while (out<p) {
j<-j+1
out<-cdf.f(j,lambda = lambda,theta=theta)
}
Y[i] <- j
}
return(Y)
}
set.seed(571)
n <- 1000
beta0<-4
beta<-1.5
lim <- (1-beta0)/beta
x1 <- rtrunc.norm(n=n, trunc1 = lim, trunc2 = Inf)
thetas<-vector(length=length(x1))
for (j in 1:length(x1)) {
alpha<-uniroot(eq, eta=beta0+beta*x1[j], upper = 500, lower =-2)$root
thetas[j] <- log(alpha)
}
y <- vector(length = length(thetas))
for (j in 1:length(y)) {
y[j] <- rcdf.f(1,1,thetas[j])
}
dat <- data.frame(id = 1:length(y), y = y, x=x1)
hist(y, breaks = seq(from=0.5, to=22.5, by=1))
summary(y)
fit<- gldrm(formula = y~x, link = "identity", data = dat)
library(devtools)
install_github("jmmaronge/gldrm")
library(gldrm)
fit2 <- gldrm(formula = y~x, link = "identity", data = dat)
sampprob <- rep(.8, length(unique(dat$y)))
fit3 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
install.packages("~/Documents/Rathouz/Projects/Semiparametric_GLM/Package/gldrm/", repos = NULL, type="source")
library(gldrm
)
fit4 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
fit3
fit4
library("devtools")
library(roxygen2)
setwd("~/Documents/Rathouz/Projects/Semiparametric_GLM/gldrm/")
document()
install_github("jmmaronge/gldrm")
rtrunc.norm<-function(n, mean=0, sd=1, trunc1, trunc2){#generate truncated normal
trunc1.tmp <- min(trunc1, trunc2)
trunc2.tmp <- max(trunc1, trunc2)
trunc1 <- trunc1.tmp
trunc2 <- trunc2.tmp
x<-rnorm(n, mean = mean, sd=sd)
x1<-x[x>trunc1&x<trunc2]
r<-(n - length(x1))
while(r>0){
x<-rnorm(r, mean = mean, sd=sd)
x1<-c(x1,x[x>trunc1&x<trunc2]);
r<-(n - length(x1))
}
return(x1)
}
zero.trunc.poisson.pmf<-function(y,lambda){
return((lambda^y)/(factorial(y)*(exp(lambda)-1)))
}
eq<- function(alpha,eta){#find root for model
require(Rmpfr)
out<- ((alpha*exp(alpha))/(expm1(alpha)))-eta
return(out)
}
pmf.f <- function(y, lambda,theta){#pmf of truncated poisson
out <- exp(y*theta -(log(exp(lambda*exp(theta))-1)-log(exp(lambda)-1)) +
y*log(lambda)-lgamma(y+1)-log(exp(lambda)-1))
return(out)
}
cdf.f<- function(y,lambda,theta){#cdf of truncated poisson
return(sum(pmf.f(c(1:y),lambda,theta)))
}
rcdf.f<-function(n, lambda, theta){ # generate observations from truncated poisson
U<-runif(n)
Y <- vector(length = length(U))
for (i in 1:length(Y)) {
j<- 0
p<- U[i]
out <- 0
while (out<p) {
j<-j+1
out<-cdf.f(j,lambda = lambda,theta=theta)
}
Y[i] <- j
}
return(Y)
}
set.seed(571)
n <- 1000
beta0<-4
beta<-1.5
lim <- (1-beta0)/beta
x1 <- rtrunc.norm(n=n, trunc1 = lim, trunc2 = Inf)
thetas<-vector(length=length(x1))
for (j in 1:length(x1)) {
alpha<-uniroot(eq, eta=beta0+beta*x1[j], upper = 500, lower =-2)$root
thetas[j] <- log(alpha)
}
y <- vector(length = length(thetas))
for (j in 1:length(y)) {
y[j] <- rcdf.f(1,1,thetas[j])
}
dat <- data.frame(id = 1:length(y), y = y, x=x1)
hist(y, breaks = seq(from=0.5, to=22.5, by=1))
summary(y)
sampprob <- rep(.8, length(unique(dat$y)))
fit3 <- gldrm(formula = y~x, link = "identity", data = dat, sampprobs = sampprob)
fit3
getf0()
?getf0
getf0
gldrm::getf0
gldrm:::getf0
library(devtools)
install_github("jmmaronge/gldrm")
install_github("jmmaronge/gldrm", force=TRUE)
library(gldrm)
gldrm:::getf0
gldrm:::getf0
gldrm
gldrm:::getf0
gldrm:::getf0_old
document()
install_github("jmmaronge/gldrm")
?getf0
?gldrm
install.packages("~/Documents/Rathouz/Projects/Semiparametric_GLM/gldrm/", repos = NULL, type="source")
library(gldrm)
